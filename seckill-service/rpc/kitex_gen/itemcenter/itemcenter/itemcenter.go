// Code generated by Kitex v0.9.1. DO NOT EDIT.

package itemcenter

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	itemcenter "go_code/seckill-service/rpc/kitex_gen/itemcenter"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Register": kitex.NewMethodInfo(
		registerHandler,
		newItemcenterRegisterArgs,
		newItemcenterRegisterResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Login": kitex.NewMethodInfo(
		loginHandler,
		newItemcenterLoginArgs,
		newItemcenterLoginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ParseToken": kitex.NewMethodInfo(
		parseTokenHandler,
		newItemcenterParseTokenArgs,
		newItemcenterParseTokenResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateToken": kitex.NewMethodInfo(
		createTokenHandler,
		newItemcenterCreateTokenArgs,
		newItemcenterCreateTokenResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SecKill": kitex.NewMethodInfo(
		secKillHandler,
		newItemcenterSecKillArgs,
		newItemcenterSecKillResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	itemcenterServiceInfo                = NewServiceInfo()
	itemcenterServiceInfoForClient       = NewServiceInfoForClient()
	itemcenterServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return itemcenterServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return itemcenterServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return itemcenterServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "Itemcenter"
	handlerType := (*itemcenter.Itemcenter)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "itemcenter",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*itemcenter.ItemcenterRegisterArgs)

	err := handler.(itemcenter.Itemcenter).Register(ctx, realArg.U)
	if err != nil {
		return err
	}

	return nil
}
func newItemcenterRegisterArgs() interface{} {
	return itemcenter.NewItemcenterRegisterArgs()
}

func newItemcenterRegisterResult() interface{} {
	return itemcenter.NewItemcenterRegisterResult()
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*itemcenter.ItemcenterLoginArgs)
	realResult := result.(*itemcenter.ItemcenterLoginResult)
	success, err := handler.(itemcenter.Itemcenter).Login(ctx, realArg.U)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newItemcenterLoginArgs() interface{} {
	return itemcenter.NewItemcenterLoginArgs()
}

func newItemcenterLoginResult() interface{} {
	return itemcenter.NewItemcenterLoginResult()
}

func parseTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*itemcenter.ItemcenterParseTokenArgs)
	realResult := result.(*itemcenter.ItemcenterParseTokenResult)
	success, err := handler.(itemcenter.Itemcenter).ParseToken(ctx, realArg.Token, realArg.Typ)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newItemcenterParseTokenArgs() interface{} {
	return itemcenter.NewItemcenterParseTokenArgs()
}

func newItemcenterParseTokenResult() interface{} {
	return itemcenter.NewItemcenterParseTokenResult()
}

func createTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*itemcenter.ItemcenterCreateTokenArgs)
	realResult := result.(*itemcenter.ItemcenterCreateTokenResult)
	success, err := handler.(itemcenter.Itemcenter).CreateToken(ctx, realArg.U, realArg.Typ)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newItemcenterCreateTokenArgs() interface{} {
	return itemcenter.NewItemcenterCreateTokenArgs()
}

func newItemcenterCreateTokenResult() interface{} {
	return itemcenter.NewItemcenterCreateTokenResult()
}

func secKillHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*itemcenter.ItemcenterSecKillArgs)
	realResult := result.(*itemcenter.ItemcenterSecKillResult)
	success, err := handler.(itemcenter.Itemcenter).SecKill(ctx, realArg.U)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newItemcenterSecKillArgs() interface{} {
	return itemcenter.NewItemcenterSecKillArgs()
}

func newItemcenterSecKillResult() interface{} {
	return itemcenter.NewItemcenterSecKillResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, u *itemcenter.User) (err error) {
	var _args itemcenter.ItemcenterRegisterArgs
	_args.U = u
	var _result itemcenter.ItemcenterRegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) Login(ctx context.Context, u *itemcenter.User) (r *itemcenter.User, err error) {
	var _args itemcenter.ItemcenterLoginArgs
	_args.U = u
	var _result itemcenter.ItemcenterLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ParseToken(ctx context.Context, token string, typ int64) (r string, err error) {
	var _args itemcenter.ItemcenterParseTokenArgs
	_args.Token = token
	_args.Typ = typ
	var _result itemcenter.ItemcenterParseTokenResult
	if err = p.c.Call(ctx, "ParseToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateToken(ctx context.Context, u *itemcenter.User, typ int64) (r string, err error) {
	var _args itemcenter.ItemcenterCreateTokenArgs
	_args.U = u
	_args.Typ = typ
	var _result itemcenter.ItemcenterCreateTokenResult
	if err = p.c.Call(ctx, "CreateToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SecKill(ctx context.Context, u *itemcenter.User) (r bool, err error) {
	var _args itemcenter.ItemcenterSecKillArgs
	_args.U = u
	var _result itemcenter.ItemcenterSecKillResult
	if err = p.c.Call(ctx, "SecKill", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
